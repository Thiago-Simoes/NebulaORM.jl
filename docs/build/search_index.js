var documenterSearchIndex = {"docs":
[{"location":"manual/start/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"manual/start/#How-to-config-ORM.jl","page":"Quickstart","title":"How to config ORM.jl","text":"","category":"section"},{"location":"manual/start/#Database-connection","page":"Quickstart","title":"Database connection","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"First you need configure database connection, just need to create a .env file in the root folder.  ","category":"page"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"Containing:","category":"page"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"DB_HOST=localhost\nDB_USER=root\nDB_PASSWORD=pass\nDB_NAME=dbname\nDB_PORT=3306","category":"page"},{"location":"manual/start/#How-to-perform-queries","page":"Quickstart","title":"How to perform queries","text":"","category":"section"},{"location":"manual/start/#How-to-create-a-Model","page":"Quickstart","title":"How to create a Model","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"using ORM\n\n@Model User (\n    (\"id\", \"INTEGER\", [@PrimaryKey(), @AutoIncrement()]),\n    (\"name\", \"TEXT\", [@NotNull()]),\n    (\"email\", \"TEXT\", [@Unique(), @NotNull()]),\n    (\"cpf\", \"VARCHAR(11)\", [@Unique(), @NotNull()]),\n    (\"age\", \"INTEGER\", [])\n)","category":"page"},{"location":"manual/start/#Inserting-data","page":"Quickstart","title":"Inserting data","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"The data should be formatted as a Dict.   Only @NotNull fields must be provided.   The return can be either an error or a Model Object (a User object in this example).","category":"page"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"userData = Dict(\"name\" => \"Thiago\", \"email\" => \"thiago@example.com\", \"cpf\" => \"00000000000\")\nuser = create(User, userData)","category":"page"},{"location":"manual/start/#Search-data","page":"Quickstart","title":"Search data","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"Now queries use a dictionary format:","category":"page"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"foundUser = findFirst(User; query=Dict(\"where\" => Dict(\"name\" => \"Thiago\")))","category":"page"},{"location":"manual/start/#Update-data","page":"Quickstart","title":"Update data","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"updatedUser = update(User, Dict(\"where\" => Dict(\"id\" => user.id)), Dict(\"name\" => \"Thiago Updated\"))","category":"page"},{"location":"manual/start/#Upsert-data","page":"Quickstart","title":"Upsert data","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"upsertUser = upsert(User, \"email\", \"thiago@example.com\",\n                    Dict(\"name\" => \"Thiago Upserted\", \"email\" => \"thiago@example.com\"))","category":"page"},{"location":"manual/start/#Update-by-instance","page":"Quickstart","title":"Update by instance","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"foundUser.name = \"Thiago Instance\"\nupdatedInstance = update(foundUser)","category":"page"},{"location":"manual/start/#Delete-data","page":"Quickstart","title":"Delete data","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"deleteResult = delete(foundUser)","category":"page"},{"location":"manual/start/#Insert-multiple-records","page":"Quickstart","title":"Insert multiple records","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"records = [\n    Dict(\"name\" => \"Bob\", \"email\" => \"bob@example.com\", \"cpf\" => \"11111111111\"),\n    Dict(\"name\" => \"Carol\", \"email\" => \"carol@example.com\", \"cpf\" => \"22222222222\")\n]\ncreatedRecords = createMany(User, records)","category":"page"},{"location":"manual/start/#Find-multiple-records","page":"Quickstart","title":"Find multiple records","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"manyUsers = findMany(User)","category":"page"},{"location":"manual/start/#Update-many","page":"Quickstart","title":"Update many","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"updatedMany = updateMany(User, Dict(\"where\" => Dict(\"name\" => \"Bob\")), Dict(\"name\" => \"Bob Updated\"))","category":"page"},{"location":"manual/start/#Filter","page":"Quickstart","title":"Filter","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"_ = createMany(User, [\n    Dict(\"name\" => \"Dan\", \"email\" => \"dan@example.com\", \"cpf\" => \"33333333333\"),\n    Dict(\"name\" => \"Eve\", \"email\" => \"eve@example.com\", \"cpf\" => \"44444444444\")\n])\nfilteredUsers = filter(User; name=\"Dan\")","category":"page"},{"location":"manual/start/#Delete-multiple-records","page":"Quickstart","title":"Delete multiple records","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"deleteManyResult = deleteMany(User, Dict(\"where\" => \"1=1\"))","category":"page"},{"location":"manual/start/#Update-Many-and-Return","page":"Quickstart","title":"Update Many and Return","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"Updates multiple records and returns the updated records.","category":"page"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"updatedManyAndReturn = updateManyAndReturn(User, Dict(\"where\" => Dict(\"name\" => \"Carol\")), Dict(\"name\" => \"Carol Updated\"))","category":"page"},{"location":"manual/start/#Pagination","page":"Quickstart","title":"Pagination","text":"","category":"section"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"Retrieve query results using limit, offset, and ordering.","category":"page"},{"location":"manual/start/","page":"Quickstart","title":"Quickstart","text":"# Retrieve first 2 users\npage1 = findMany(User; query=Dict(\"limit\" => 2, \"offset\" => 0, \"orderBy\" => \"id\"))\n# Retrieve next 2 users starting from the third record\npage2 = findMany(User; query=Dict(\"limit\" => 2, \"offset\" => 2, \"orderBy\" => \"id\"))\n# Retrieve remaining records\npage3 = findMany(User; query=Dict(\"limit\" => 2, \"offset\" => 4, \"orderBy\" => \"id\"))","category":"page"},{"location":"manual/relationship/#Relationship","page":"Relationship","title":"Relationship","text":"","category":"section"},{"location":"manual/relationship/#Introduction","page":"Relationship","title":"Introduction","text":"","category":"section"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"OrionORM.jl is an ORM for Julia that simplifies defining models and managing relationships between them. With OrionORM.jl, you can define relationships such as:","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"hasMany: A record in one model has many related records in another model.\nbelongsTo: A record in one model belongs to a record in another model.\nhasOne: A record in one model has a single related record in another model.","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"In addition, OrionORM.jl allows you to enrich query results using the \"include\" key in a query dictionary. This way, you can return related data as part of a Dict (for single record queries) or a vector of Dicts (for multiple records).","category":"page"},{"location":"manual/relationship/#Creating-Models-with-Relationships","page":"Relationship","title":"Creating Models with Relationships","text":"","category":"section"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"To define models along with their relationships, use the @Model macro. For example:","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"@Model User (\n    (\"id\", \"INTEGER\", [@PrimaryKey(), @AutoIncrement()]),\n    (\"name\", \"TEXT\", [@NotNull()]),\n    (\"email\", \"TEXT\", [@Unique(), @NotNull()])\n) [\n    (\"posts\", Post, \"authorId\", :hasMany)\n]\n\n@Model Post (\n    (\"id\", \"INTEGER\", [@PrimaryKey(), @AutoIncrement()]),\n    (\"title\", \"TEXT\", [@NotNull()]),\n    (\"authorId\", \"INTEGER\", [@NotNull()])\n) [\n    (\"authorId\", User, \"id\", :belongsTo)\n]","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"In this example:","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"A User has many Post records through a hasMany relationship (the authorId field in Post references the id field in User).\nA Post belongs to a User via a belongsTo relationship (the authorId field in Post references the id field in User).","category":"page"},{"location":"manual/relationship/#Querying-with-the-\"include\"-Parameter","page":"Relationship","title":"Querying with the \"include\" Parameter","text":"","category":"section"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"When using the \"include\" parameter in your queries, OrionORM.jl enriches the result with related records. Depending on the relationship type, the return format will be:","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"hasMany/hasOne: The result will include, under the key of the related model, either a vector of Dicts (for hasMany) or a single Dict (for hasOne).\nbelongsTo: The result will include a single Dict with the parent record's data.","category":"page"},{"location":"manual/relationship/#Example-1:-Query-with-belongsTo","page":"Relationship","title":"Example 1: Query with belongsTo","text":"","category":"section"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"result = findFirst(Post; query=Dict(\"where\" => Dict(\"id\" => 1), \"include\" => [\"User\"]))","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"Assuming the post with id = 1 belongs to a user, the result will be a Dict similar to:","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"Dict(\n    \"id\" => 1,\n    \"title\" => \"Example Post\",\n    \"authorId\" => 10,\n    \"User\" => Dict(\"id\" => 10, \"name\" => \"Thalles\", \"email\" => \"thalles@example.com\")\n)","category":"page"},{"location":"manual/relationship/#Example-2:-Query-with-hasMany","page":"Relationship","title":"Example 2: Query with hasMany","text":"","category":"section"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"results = findMany(User; query=Dict(\"where\" => Dict(\"name\" => \"Thiago\"), \"include\" => [\"Post\"]))","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"Each item in results will be a Dict structured as follows:","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"Dict(\n    \"id\" => 10,\n    \"name\" => \"Thiago\",\n    \"email\" => \"thiago@example.com\",\n    \"Post\" => [\n         Dict(\"id\" => 1, \"title\" => \"First Post\", \"authorId\" => 10),\n         Dict(\"id\" => 2, \"title\" => \"Second Post\", \"authorId\" => 10)\n    ]\n)","category":"page"},{"location":"manual/relationship/#Internal-Workflow","page":"Relationship","title":"Internal Workflow","text":"","category":"section"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"When a query is executed with the \"include\" parameter, the workflow is as follows:","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"Main Query:   The findFirst or findMany function builds an SQL query to fetch records from the base model (e.g., User or Post).\nSerialization:   Each returned record is converted into a simple Dict (using a helper function like serialize or convertRowToDict).\nEnrichment:   The ORM goes through the list of models specified in \"include\". For each included model, it:\nFinds the registered relationship (using getRelationships and resolveModel).\nExecutes a separate query (via hasMany, hasOne, or belongsTo) to fetch related records.\nAdds the related data to the main record’s Dict under a key corresponding to the related model.","category":"page"},{"location":"manual/relationship/#Example-Tests","page":"Relationship","title":"Example Tests","text":"","category":"section"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"Below is an excerpt of unit tests that demonstrate the use of relationships and the \"include\" parameter:","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"@testset \"SimpleORM Basic CRUD Tests\" begin\n    # Create a user\n    userData = Dict(\"name\" => \"Thiago\", \"email\" => \"thiago@example.com\", \"cpf\" => \"00000000000\")\n    user = create(User, userData)\n    @test user.name == \"Thiago\"\n    @test user.email == \"thiago@example.com\"\n    @test hasproperty(user, :id)\n\n    # Create a post related to the user\n    postData = Dict(\"title\" => \"My First Post\", \"authorId\" => user.id)\n    post = create(Post, postData)\n    @test post.title == \"My First Post\"\n    @test post.authorId == user.id\n\n    # Query with \"include\" to fetch the user and their posts\n    result = findFirst(User; query=Dict(\"where\" => Dict(\"name\" => \"Thiago\"), \"include\" => [\"Post\"]))\n    @test result[\"id\"] == user.id\n    @test typeof(result[\"Post\"]) == Vector\n    @test result[\"Post\"][1][\"title\"] == \"My First Post\"\n\n    # Query with belongsTo: fetch the post and include the user\n    result2 = findFirst(Post; query=Dict(\"where\" => Dict(\"id\" => post.id), \"include\" => [\"User\"]))\n    @test result2[\"id\"] == post.id\n    @test typeof(result2[\"User\"]) == Dict\n    @test result2[\"User\"][\"id\"] == user.id\nend","category":"page"},{"location":"manual/relationship/#Conclusion","page":"Relationship","title":"Conclusion","text":"","category":"section"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"With OrionORM.jl, you can easily define models with relationships and perform enriched queries using the \"include\" parameter. This modular approach allows you to build complex queries without manually writing SQL, returning structured results as Dicts that simplify data consumption in your application.","category":"page"},{"location":"manual/relationship/","page":"Relationship","title":"Relationship","text":"Feel free to contribute suggestions or ask questions if you need further details!","category":"page"},{"location":"Reference/API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"Reference/API/","page":"API","title":"API","text":"Modules = [OrionORM]","category":"page"},{"location":"Reference/API/#OrionORM.advancedFindMany-Tuple{DataType}","page":"API","title":"OrionORM.advancedFindMany","text":"advancedFindMany(model::DataType; query::AbstractDict = Dict())\n\nRealiza uma consulta avançada no modelo base.\n\n\n\n\n\n","category":"method"},{"location":"Reference/API/#OrionORM.@Model","page":"API","title":"OrionORM.@Model","text":"    macro Model(modelName, colsExpr)\n\nGenerate a model struct definition and register it in the global model registry.\n\nExemplo:\n@Model User (\n    (\"id\", NUMBER, PrimaryKey(), AutoIncrement()),\n    (\"name\", VARCHAR(255), NotNull()),\n    (\"email\", VARCHAR(255), NotNull(), Unique())\n)\n\n\n\n\n\n","category":"macro"},{"location":"#ORM.jl","page":"Home","title":"ORM.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Easy ORM for Julia.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Models: conversion, instantiation;\nCRUD functions;\nDatabase connection using .env file;\nMySQL Support;\nRelationships.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
